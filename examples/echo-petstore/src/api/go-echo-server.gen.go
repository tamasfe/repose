// This code generated by Repose.

package api

import (
	echo "github.com/labstack/echo/v4"
	"strconv"
	"strings"
)

// Server is the server interface with the handlers based on the specification.
//
// It contains Echo handlers as its methods.
// To use it, implement it on a custom type,
// and then register it with an echo instance.
type Server interface {

	// AddPet is the "POST" operation for path "/pets".
	//
	// Description: Creates a new pet in the store. Duplicates are allowed.
	//
	// Parameters:
	//     "body" in body with content-type application/json.
	//     Description: Pet to add to the store.
	//
	// Responses:
	//     "Pet" (200): with content-type application/json.
	//     Description: pet response.
	//
	//     "Error" (default): with content-type application/json.
	//     Description: unexpected error.
	//
	AddPet(c echo.Context, body *NewPet) (AddPetHandlerResponse, error)

	// FindPets is the "GET" operation for path "/pets".
	//
	// Description: Returns all pets from the system that the user has access to
	// Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem
	// sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio
	// lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac
	// eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at
	// adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie
	// imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend
	// sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In
	// eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed,
	// placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula
	// interdum libero. Morbi euismod sagittis libero sed lacinia.
	// Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu
	// condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In
	// a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh.
	// Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula
	// libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec
	// scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis
	// felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem,
	// molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia
	// mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit
	// eu, euismod sapien.
	//
	// Parameters:
	//     "limit" in query.
	//     Description: maximum number of results to return.
	//
	//     "tags" in query.
	//     Description: tags to filter by.
	//
	// Responses:
	//     "FindPetsResponse200" (200): with content-type application/json.
	//     Description: pet response.
	//
	//     "Error" (default): with content-type application/json.
	//     Description: unexpected error.
	//
	FindPets(c echo.Context, limit *int32, tags []string) (FindPetsHandlerResponse, error)

	// DeletePet is the "DELETE" operation for path "/pets/{id}".
	//
	// Description: deletes a single pet based on the ID supplied.
	//
	// Parameters:
	//     "id" in path.
	//     Description: ID of pet to delete.
	//
	// Responses:
	//     "DeletePetResponse204" (204).
	//     Description: pet deleted.
	//
	//     "Error" (default): with content-type application/json.
	//     Description: unexpected error.
	//
	DeletePet(c echo.Context, id int64) (DeletePetHandlerResponse, error)

	// FindPetById is the "GET" operation for path "/pets/{id}".
	//
	// Description: Returns a user based on a single ID, if the user does not have
	// access to the pet.
	//
	// Parameters:
	//     "id" in path.
	//     Description: ID of pet to fetch.
	//
	// Responses:
	//     "Pet" (200): with content-type application/json.
	//     Description: pet response.
	//
	//     "Error" (default): with content-type application/json.
	//     Description: unexpected error.
	//
	FindPetById(c echo.Context, id int64) (FindPetByIdHandlerResponse, error)

	// Middleware allows attaching middleware to each operation.
	Middleware() *ServerMiddleware
}

// ServerMiddleware describes the middleware for operations of Server
type ServerMiddleware struct {
	AddPet      []echo.MiddlewareFunc
	FindPets    []echo.MiddlewareFunc
	DeletePet   []echo.MiddlewareFunc
	FindPetById []echo.MiddlewareFunc
}

// EchoInstance is required to add handlers to
// to both Echo instances and Echo groups.
type EchoInstance interface {
	Add(string, string, echo.HandlerFunc, ...echo.MiddlewareFunc) *echo.Route
}

// RegisterEchoServer registers a Server with an Echo instance,
// and wraps Server's handlers with Echo handlers.
// Depending on the options, parameter parsing
// and response encoding are done in the wrapper.
//
// Note that the parameters and responses are NOT validated by the wrapper.
// The value of an invalid parameter will be the default Go value.
// If you need to do validation, do it in a middleware,
// or in Server's methods.
func RegisterEchoServer(e EchoInstance, server Server) {
	middleware := server.Middleware()

	if middleware == nil {
		middleware = new(ServerMiddleware)
	}

	e.Add("POST", "/pets", func(c echo.Context) error {
		var body = new(NewPet)
		_ = c.Bind(body)

		result, err := server.AddPet(c, body)
		if err != nil {
			return err
		}
		return result.AddPetHandlerResponse(c)

	}, middleware.AddPet...)

	e.Add("GET", "/pets", func(c echo.Context) error {
		var limit = new(int32)
		if _parsedVal, err := strconv.ParseInt(c.QueryParam("limit"), 10, 32); err == nil {
			_v := int32(_parsedVal)
			limit = &_v
		}

		var tags []string
		for _, _s := range strings.Split(c.QueryParam("tags"), ",") {
			var _param string
			_param = _s
			tags = append(tags, _param)
		}

		result, err := server.FindPets(c, limit, tags)
		if err != nil {
			return err
		}
		return result.FindPetsHandlerResponse(c)

	}, middleware.FindPets...)

	e.Add("DELETE", "/pets/:id", func(c echo.Context) error {
		var id int64
		if _parsedVal, err := strconv.ParseInt(c.Param("id"), 10, 64); err == nil {
			_v := _parsedVal
			id = _v
		}

		result, err := server.DeletePet(c, id)
		if err != nil {
			return err
		}
		return result.DeletePetHandlerResponse(c)

	}, middleware.DeletePet...)

	e.Add("GET", "/pets/:id", func(c echo.Context) error {
		var id int64
		if _parsedVal, err := strconv.ParseInt(c.Param("id"), 10, 64); err == nil {
			_v := _parsedVal
			id = _v
		}

		result, err := server.FindPetById(c, id)
		if err != nil {
			return err
		}
		return result.FindPetByIdHandlerResponse(c)

	}, middleware.FindPetById...)

}

type noResponse string

// NoResponse indicate that the response should not be handled by the generated code.
const NoResponse noResponse = ""

// AddPetHandlerResponse defines responses for the AddPet operation.
type AddPetHandlerResponse interface {
	AddPetHandlerResponse(echo.Context) error
}

func (n noResponse) AddPetHandlerResponse(ctx echo.Context) error {
	return nil
}

// AddPetHandlerResponse is implemented for Pet so that it can be used in a
// response.
func (p *Pet) AddPetHandlerResponse(ctx echo.Context) error {
	if p == nil {
		ctx.NoContent(200)
		return nil
	}

	err := ctx.JSON(200, p)
	return err
}

// FindPetsHandlerResponse defines responses for the FindPets operation.
type FindPetsHandlerResponse interface {
	FindPetsHandlerResponse(echo.Context) error
}

func (n noResponse) FindPetsHandlerResponse(ctx echo.Context) error {
	return nil
}

// DeletePetHandlerResponse defines responses for the DeletePet operation.
type DeletePetHandlerResponse interface {
	DeletePetHandlerResponse(echo.Context) error
}

func (n noResponse) DeletePetHandlerResponse(ctx echo.Context) error {
	return nil
}

type resDeletePetResponse204 string

// DeletePetResponse204 defines an empty response for the DeletePet operation.
const DeletePetResponse204 resDeletePetResponse204 = ""

func (r resDeletePetResponse204) DeletePetHandlerResponse(ctx echo.Context) error {
	ctx.NoContent(204)
	return nil
}

// FindPetByIdHandlerResponse defines responses for the FindPetById operation.
type FindPetByIdHandlerResponse interface {
	FindPetByIdHandlerResponse(echo.Context) error
}

func (n noResponse) FindPetByIdHandlerResponse(ctx echo.Context) error {
	return nil
}

// FindPetByIdHandlerResponse is implemented for Pet so that it can be used in a
// response.
func (p *Pet) FindPetByIdHandlerResponse(ctx echo.Context) error {
	if p == nil {
		ctx.NoContent(200)
		return nil
	}

	err := ctx.JSON(200, p)
	return err
}

